{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nicolas\\\\Desktop\\\\curso de react\\\\rursoreact\\\\src\\\\components\\\\cartContext.jsx\",\n  _s = $RefreshSig$();\n//@ts-check\n\nimport React, { useState, createContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const contextoGeneral = /*#__PURE__*/createContext();\nexport default function CartContext(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [carrito, setCarrito] = useState([]);\n  function isInCart(id) {\n    const pos = carrito.findIndex(item => item.id == id);\n    return pos;\n  }\n  function addItem(item, quantity) {\n    // agregar cierta cantidad de un ítem al carrito\n    const pos = isInCart(item.id);\n    if (pos == -1) {\n      setCarrito([...carrito, {\n        ...item,\n        quantity\n      }]);\n    } else {\n      const carritoAux = [...carrito];\n      carritoAux[pos] = {\n        ...carritoAux[pos],\n        quantity: carritoAux[pos].quantity + quantity\n      };\n      setCarrito(carritoAux);\n    }\n  }\n  if (item == -1) {\n    //no existe\n    //setNuevoProducto(nuevoProducto);\n    //nuevoProducto.cantidad =1;\n    //setCarrito(carrito.concat(nuevoProducto));\n    //setCarrito([...carrito, item, cuantity]);\n  } else {\n    //sumar a cantidades\n    carrito[item].cantidad = carrito[item].cantidad + nuevoProducto.cantidad;\n  }\n\n  // function removeItem(){  // Remover un item del cart por usando su id\n  //     let item;\n  //     item = carrito.findIndex((product) => product.id === nuevoProducto.id);\n  //     carrito.splice(item, 1);\n\n  //     //const removeItem = (id) => setCart(cart.filter(product => product.id !== id));\n\n  // }\n\n  // function clear(){ // Remover todos los items\n  //     setCarrito([]);\n  // }\n\n  return /*#__PURE__*/_jsxDEV(contextoGeneral.Provider, {\n    value: {\n      nuevoProducto,\n      setNuevoProducto,\n      carrito,\n      setCarrito,\n      addItem,\n      removeItem,\n      clear,\n      isInCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n_s(CartContext, \"P1BaWXIQpOcWXPCAlakQBGCmK7g=\");\n_c = CartContext;\nvar _c;\n$RefreshReg$(_c, \"CartContext\");","map":{"version":3,"names":["React","useState","createContext","contextoGeneral","CartContext","children","carrito","setCarrito","isInCart","id","pos","findIndex","item","addItem","quantity","carritoAux","cantidad","nuevoProducto","setNuevoProducto","removeItem","clear"],"sources":["C:/Users/nicolas/Desktop/curso de react/rursoreact/src/components/cartContext.jsx"],"sourcesContent":["//@ts-check\r\n\r\nimport React, { useState, createContext } from \"react\";\r\n\r\nexport const contextoGeneral = createContext();\r\n\r\nexport default function CartContext({ children }) {\r\n    const [carrito, setCarrito] = useState([]);\r\n    \r\n    \r\n    \r\n    function isInCart(id) { \r\n        const pos = carrito.findIndex((item) => item.id == id);\r\n        return pos;\r\n    }\r\n\r\n    function addItem(item, quantity) { // agregar cierta cantidad de un ítem al carrito\r\n        const pos = isInCart(item.id);\r\n        if (pos == -1) {\r\n            setCarrito([...carrito, { ...item, quantity }]);\r\n        } else {\r\n            const carritoAux = [...carrito];\r\n            carritoAux[pos] = { ...carritoAux[pos], quantity: carritoAux[pos].quantity + quantity };\r\n            setCarrito(carritoAux);\r\n        }\r\n    }\r\n\r\n        if (item == -1) {\r\n            //no existe\r\n            //setNuevoProducto(nuevoProducto);\r\n            //nuevoProducto.cantidad =1;\r\n            //setCarrito(carrito.concat(nuevoProducto));\r\n            //setCarrito([...carrito, item, cuantity]);\r\n        } else {\r\n            //sumar a cantidades\r\n            carrito[item].cantidad = carrito[item].cantidad + nuevoProducto.cantidad;\r\n            \r\n        }\r\n\r\n    \r\n\r\n    // function removeItem(){  // Remover un item del cart por usando su id\r\n    //     let item;\r\n    //     item = carrito.findIndex((product) => product.id === nuevoProducto.id);\r\n    //     carrito.splice(item, 1);\r\n\r\n    //     //const removeItem = (id) => setCart(cart.filter(product => product.id !== id));\r\n\r\n    // }\r\n\r\n    // function clear(){ // Remover todos los items\r\n    //     setCarrito([]);\r\n    // }\r\n\r\n    \r\n\r\n\r\n    return (\r\n        <contextoGeneral.Provider value={{ nuevoProducto, setNuevoProducto, carrito, setCarrito, addItem, removeItem, clear, isInCart }}>\r\n            {children}\r\n        </contextoGeneral.Provider>\r\n    );\r\n}"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,aAAa,QAAQ,OAAO;AAAC;AAEvD,OAAO,MAAMC,eAAe,gBAAGD,aAAa,EAAE;AAE9C,eAAe,SAASE,WAAW,OAAe;EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC;EAC5C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAI1C,SAASO,QAAQ,CAACC,EAAE,EAAE;IAClB,MAAMC,GAAG,GAAGJ,OAAO,CAACK,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACH,EAAE,IAAIA,EAAE,CAAC;IACtD,OAAOC,GAAG;EACd;EAEA,SAASG,OAAO,CAACD,IAAI,EAAEE,QAAQ,EAAE;IAAE;IAC/B,MAAMJ,GAAG,GAAGF,QAAQ,CAACI,IAAI,CAACH,EAAE,CAAC;IAC7B,IAAIC,GAAG,IAAI,CAAC,CAAC,EAAE;MACXH,UAAU,CAAC,CAAC,GAAGD,OAAO,EAAE;QAAE,GAAGM,IAAI;QAAEE;MAAS,CAAC,CAAC,CAAC;IACnD,CAAC,MAAM;MACH,MAAMC,UAAU,GAAG,CAAC,GAAGT,OAAO,CAAC;MAC/BS,UAAU,CAACL,GAAG,CAAC,GAAG;QAAE,GAAGK,UAAU,CAACL,GAAG,CAAC;QAAEI,QAAQ,EAAEC,UAAU,CAACL,GAAG,CAAC,CAACI,QAAQ,GAAGA;MAAS,CAAC;MACvFP,UAAU,CAACQ,UAAU,CAAC;IAC1B;EACJ;EAEI,IAAIH,IAAI,IAAI,CAAC,CAAC,EAAE;IACZ;IACA;IACA;IACA;IACA;EACJ,CAAC,MAAM;IACH;IACAN,OAAO,CAACM,IAAI,CAAC,CAACI,QAAQ,GAAGV,OAAO,CAACM,IAAI,CAAC,CAACI,QAAQ,GAAGC,aAAa,CAACD,QAAQ;EAE5E;;EAIJ;EACA;EACA;EACA;;EAEA;;EAEA;;EAEA;EACA;EACA;;EAKA,oBACI,QAAC,eAAe,CAAC,QAAQ;IAAC,KAAK,EAAE;MAAEC,aAAa;MAAEC,gBAAgB;MAAEZ,OAAO;MAAEC,UAAU;MAAEM,OAAO;MAAEM,UAAU;MAAEC,KAAK;MAAEZ;IAAS,CAAE;IAAA,UAC3HH;EAAQ;IAAA;IAAA;IAAA;EAAA,QACc;AAEnC;AAAC,GAxDuBD,WAAW;AAAA,KAAXA,WAAW;AAAA;AAAA"},"metadata":{},"sourceType":"module"}